# SPDX-License-Identifier: MIT
#
# Copyright (C) 2017 Francis Deslauriers <francis.deslauriers@efficios.com>
# Copyright (C) 2020 Jérémie Galarneau <jeremie.galarneau@efficios.com>

import sys
import os
import shutil
import subprocess

# Distutils was removed in Python 3.12, use setuptools as an alternative.
if sys.version_info >= (3, 12):
    from setuptools import setup, Extension
    from setuptools.command.build_ext import build_ext
else:
    from distutils.core import setup, Extension
    from distutils.command.build_ext import build_ext


# Starting with Debian's Python 3.10, the default install scheme is
# 'posix_local' which is a Debian specific scheme based on 'posix_prefix' but
# with an added 'local' prefix. This is the default so users doing system wide
# manual installations of python modules end up in '/usr/local'. This
# interferes with our autotools based install which already defaults to
# '/usr/local' and expect a provided prefix to be used verbatim.
#
# Monkeypatch sysconfig to override this scheme and use 'posix_prefix' instead.
if sys.version_info >= (3, 10):
    import sysconfig

    original_get_preferred_scheme = sysconfig.get_preferred_scheme

    def our_get_preferred_scheme(key):
        scheme = original_get_preferred_scheme(key)
        if scheme == "posix_local":
            return "posix_prefix"
        else:
            return scheme

    sysconfig.get_preferred_scheme = our_get_preferred_scheme

else:
    import distutils.sysconfig as sysconfig

PY_PATH_WARN_MSG = """
-------------------------------------WARNING------------------------------------
The install directory used:\n ({})\nis not included in your PYTHONPATH.

To add this directory to your Python search path permanently you can add the
following command to your .bashrc/.zshrc:
    export PYTHONPATH="${{PYTHONPATH}}:{}"
--------------------------------------------------------------------------------
"""

original_get_config_vars = sysconfig.get_config_vars


# Get the value of environment variable `name` and assert that it exists.
def getenv_assert(name: str):
    value = os.getenv(name)
    assert value is not None
    return value


# distutils performs a similar transformation step on LDSHARED on
# darwin to use the overridden CC as the default command for LDSHARED
# (see distutils' customize_compiler() step in the sysconfig module).
#
# This takes it a step further by using our own LDFLAGS (when available)
# along with the overridden compiler and ensure that flags that are unsupported
# by either the Python interprter's CC or the overridden CC don't cause a
# build failure.
def get_ldshared():
    cc = getenv_assert("CC")
    ldflags = getenv_assert("LDFLAGS")
    [py_cc] = original_get_config_vars("CC")
    [py_ldshared] = original_get_config_vars("LDSHARED")

    if not py_ldshared.startswith(py_cc):
        return py_ldshared

    return "{} -shared {}".format(cc, ldflags)


def our_get_config_vars(*args):
    overridden_config_vars_funcs = {
        "LDSHARED": get_ldshared,
    }

    if len(args) == 0:
        # Return a dict with all config vars.
        all_config_vars = original_get_config_vars()
        for name in overridden_config_vars_funcs:
            all_config_vars[name] = overridden_config_vars_funcs[name]()

        return all_config_vars
    else:
        # Return a list with the requested config vars.
        subset_config_vars = []
        for name in args:
            if name in overridden_config_vars_funcs:
                subset_config_vars.append(overridden_config_vars_funcs[name]())
            else:
                subset_config_vars.append(original_get_config_vars(name)[0])

        return subset_config_vars


sysconfig.get_config_vars = our_get_config_vars


# Returns 'True' when running on a MinGW system.
def is_mingw():
    return sys.platform == "win32" and shutil.which("cygpath") is not None


# On MinGW systems run 'cygpath -m' on 'path', on other systems return 'path' as-is.
def cygpath_m(path: str):
    if is_mingw():
        return subprocess.check_output(
            'cygpath -m "{}"'.format(path), shell=True, encoding="utf-8"
        ).strip("\n")

    return path


# On MinGW systems, convert absolute include paths (starting with '-I/')
# in 'flags' to valid Windows paths using cygpath. On other systems,
# return 'flags' as-is.
def transform_include_paths_if_mingw(flags: str):
    if not is_mingw():
        return flags

    return " ".join(
        (
            "-I{}".format(cygpath_m(flag[2:])) if flag.startswith("-I/") else flag
            for flag in flags.split()
        )
    )


class custom_build_ext(build_ext):
    def build_extensions(self):
        # There are multiple issues handled simultaneously here:
        #
        #  - distutils (at least before setuptools 72.2.0) doesn't
        #    handle well building shared objects from C++ source files.
        #    It will attempt to compile them using the C compiler. Set
        #    the executable used to compile C++ source files that will
        #    end up in shared objects so that it uses the C++ compiler
        #    defined by the `CXX` environment variable.
        #
        #  - The CPPFLAGS and CXXFLAGS provided by sysconfig may not
        #    work with the compiler we tell distutils to use. We
        #    therefore also force our own flags (the call to
        #    `set_executable()` below overrides any flags previously
        #    found by distutils).
        #
        #   - On MSYS2, some include paths need to be converted from
        #     Unix to Windows form.

        cxxflags = transform_include_paths_if_mingw(getenv_assert("CXXFLAGS"))
        cppflags = transform_include_paths_if_mingw(getenv_assert("CPPFLAGS"))
        cxx = getenv_assert("CXX")

        self.compiler.set_executable(
            (
                # setuptools >= 72.2.0 uses the `compiler_so_cxx`
                # attribute:
                #
                #   https://github.com/pypa/setuptools/commit/2c937116cc0dcd9b26b6070e89a3dc5dcbedc2ae
                #
                # This version of setuptools seems to have better support
                # for building shared objects from C++ source files, but
                # we override the executable anyway, for consistency.
                "compiler_so_cxx"
                if hasattr(self.compiler, "compiler_so_cxx")
                else "compiler_so"
            ),
            "{} {} {} {}".format(
                cxx, sysconfig.get_config_var("CCSHARED"), cxxflags, cppflags
            ),
        )

        super().build_extensions()


def main():
    babeltrace_ext = Extension(
        "bt2._native_bt",
        sources=[
            "bt2/native_bt.cpp",
            cygpath_m("@srcdir@/bt2/logging.cpp"),
        ],
        libraries=["babeltrace2", "glib-2.0"],
        extra_objects=[
            "@top_builddir@/src/autodisc/.libs/libautodisc.a",
            "@top_builddir@/src/logging/.libs/liblogging.a",
            "@top_builddir@/src/common/.libs/libcommon.a",
            "@top_builddir@/src/py-common/.libs/libpy-common.a",
            "@top_builddir@/src/string-format/.libs/libstring-format.a",
        ],
    )

    dist = setup(
        name="bt2",
        version="@PACKAGE_VERSION@",
        description="Babeltrace 2 Python Bindings",
        packages=["bt2"],
        package_dir={"bt2": "bt2"},
        options={
            "build": {"build_base": "build", "build_lib": "build/build_lib"},
            "build_ext": {"build_lib": "build/build_lib"},
        },
        url="https://babeltrace.org/",
        ext_modules=[babeltrace_ext],
        license="MIT",
        classifiers=[
            "Development Status :: 5 - Production/Stable",
            "Intended Audience :: Developers",
            "License :: OSI Approved :: The MIT License",
            "Programming Language :: Python :: 3" "Topic :: System :: Logging",
        ],
        cmdclass={"build_ext": custom_build_ext},
    )

    # After the installation, we check that the install directory is included in
    # the Python search path and we print a warning message when it's not.
    # We need to do this because Python search path differs depending on the distro
    # and some distros don't include any /usr/local/ in the search path. This is
    # also useful for out-of-tree installs and tests.
    # It's only relevant to make this check on the `install` command.

    if "install" in dist.command_obj:
        install_dir = dist.command_obj["install"].install_libbase
        if install_dir not in sys.path:
            # We can't consider this an error because if affects every
            # distro differently. We only warn the user that some
            # extra configuration is needed to use the bindings
            print(PY_PATH_WARN_MSG.format(install_dir, install_dir))


if __name__ == "__main__":
    main()
